==========================
 What I've learned so far
==========================

This is a current tally of stuff I've learned so far.

-----------------------------------
 Terminal Commands for Linux/MacOS
-----------------------------------

pwd - print working directory
hostname - my computer's network name
env - look at your environment
export - export/set a new environment variable
mkdir - make directory
cd - change directory
ls - list directory
rmdir - remove directory 
pushd - push directory
popd - pop directory
cp - copy a file or directory
mv - move a file or directory
less - page through a file 
cat - print a whole file
echo - print some arguments
xargs - execute arguments
find - find files
grep - find things inside files
man - read manual page
apropros - find which man page is appropriate
exit - exit the shell
sudo - become root user

------------------
 Exercise 1 and 2
------------------
- print()
- # comments
- running .py files from the terminal

>> print("This is a string that gets printed to the terminal")

# <-- this symbol is called an octothorpe
# anything typed after the octothorpe becomes a comment
# comments get ignored
# comments are useful for describing what a line of code does or what a certain variable is, etc.

# to run a .py file, type this in the terminal --> python3 file_name.py

# alternatively you can type and enter python3 to start python shell
# then you type exec(open("file_name.py").read())
# to quit the python shell, type and enter quit()

------------
 Exercise 3
------------

- math

+ this does addition
- this does subtraction
* this does multiplication
/ this does division, and gives you a floating number
// this also does floor division, and rounds down the result to the nearest integer
% this is a modulus, and it gives the remainder from a division
< less than
> greater than
<= less than or equal to
>= more than or equal to
== this checks if two objects are equal

------------
 Exercise 4
------------

- variables

variables are containers for storing data values
they're names you give to some value
you assign value to a variable using a single equal sign
>> some_variable = <data type value>

so, there's a difference between what single equal and double equal do 

------------
 Exercise 5
------------

- strings
- embedding variables in f strings

a string is some text you put in single or double quotes
to put variables in some text you can use an f string, or formatted string

some sample code to illustrate this:

>> name = "Thanos"
   age = 1000

# the string is preceded by an f
# inside the string, the variables are put inside curly braces
>> print(f"My name is {name} and I am {age} years old.") 

------------
 Exercise 6
------------

- format()

here's another way to print a string with embedded values
nb: the values that go into the curly braces aren't actually named variables

>> print("My name is {} and I am {} years old".format("Thanos", 1000))

------------
 Exercise 7
------------

- more string stuff

you can repeat the printing of a character with multiplication
>> print("-" * 10)

if you need a space between words, that can be done a few ways
>> print("Samurai " + "Jack")
   print("Samurai" + " Jack")
   print("Samurai" + " " + "Jack")

------------
 Exercise 8
------------

- more on format()

>> formatted_string = "{} {} {} {}"

the values passed in the parentheses are printed where the curly braces are
they're also arranged in order
>> print(formatted_string.format("one", "two", "three", "four"))
   print(formatted_string.format(1, 2, 3, 4))
   print(formatted_string.format(True, True, False, True))

------------
 Exercise 9
------------

- more strings
- multiline strings
- escaping newline

>> crew = "Jet Spike Faye Edward Ein"
   print("This is the crew of the Bebop: ", crew)

#below is a multiline string
>> print("""I sing the body electric,
   The armies of those I love engirth me and I engirth them,
   They will not let me off till I go with them, respond to them,
   And discorrupt them, and charge them full with the charge of the soul.""")

#you can also break to a newline in this way
#\n is an escape character that breaks to a new line
>> print("I sing the body electric\nThe armies of those I love...")

-------------
 Exercise 10
-------------

- escape sequences

the backslash (\) encodes characters into a string
there are various escape sequences

#consider the code below
#the double quote after the second 8 could be confused as a double quote that closes the string
#we put a backslash in front of that double quote to escape it
>> print("Green Scar Hulk is 8'8\" tall")

you can also use triple quotes to deal with such a case, i.e. """ """ or ''' ''' 

some escape sequences:
\\ backslash
\n new line
\t tab

--------------------
 Exercise 11 and 12
--------------------

- asking the user questions
- prompting the user
- storing inputs to variables

there's different ways to prompt the user, ask questions and receive inputs

>> print("Hello! What's your name?")
   name = input()
   print(f"Hi, {name}!")

we can also do it slightly differently

>> name = input("Hello! What's your name?")
   print(f"Hi, {name}!")

the input entered from the command line are strings
if you need integers for calculation you can do this

age = int(input("How old are you?"))

--------------------
 Exercise 13 and 14
--------------------

- importing modules
- passing arguments

when we run a python file from the command line it looks like this
>> python3 file_name.py

the filename part is called an argument
we can write a program that accepts arguments like that
>> from sys import argv
   script, name = argv

   print(f"Hello, {name}! I'm the {script} script.")

we run the program from the command line like so
>> python3 file_name.py some_name

trying to run the program with not enough arguments throws an error
the order in which we pass in the two arguments also matters

we can use argv and input() together
>> from sys import argv
   script, username = argv

   print(f"Hello, {username}! This is the {script} script.")
   origin_location = input("Where are you from?)

   print("Wow, {username}. I didn't know you were from {origin_location}.")

------------------------
 Exercise 15, 16 and 17
------------------------

- reading files
- writing files
- copying files
- some commands related to files

here's a simple program that opens and reads files
>> from sys import argv
   script , file_name = argv

   text = open(file_name)

   print(f"Here's the {file_name} file you requested: ")
   print(text.read())

there's several other commands you can use with files
o close: closes the file duh
o read: reads the contents of the file, you can assign the result to a variable
o readline: reads a single line of a text file
o truncate: empties the file, be careful
o write('Some text'): writes some text to a file
o seek(0): moves the read/write location to the beginning of the file

there's several ways to use open()
doing it like so lets you write and read
>> from sys import argv

   script, filename, sometext = argv
   text = open(filename, 'w+')
   text.write(sometext)

   print(f"{filename} has been created")
   print(text.read())

the 'w' mode creates a new file or truncates the given filename
there's a few other modes 
o r: open a file for reading (default)
o w: open a file for writing, creates a new file if it doesn't exist or truncates the file if it exists
o a: open for appending at the end of the file without truncating it, creates a new file if it doesn't exist
o t: open in text mode (default)
o b: open in binary mode
o +: open a file for updating (reading and writing)

we can also copy one file to another
>> from sys import argv
   script og_file nu_file = argv 

   input_file = open(og_file)
   text = input_file.read()

   output_file = open(nu_file, 'w')
   output_file.write(text)

   output_file.close()
   input_file.close()

----------------------------
 Exercise 18, 19, 20 and 21
----------------------------

- functions
- parameters

we create functions like so:
def function_name(argument1, argument2):
   # do something

we define the function with the keyword def
we name the function
we specify what arguments/parameters the function takes
we end that first line with a colon
and in the function block, we hit space 4 times

a sample function
>> def donated_cans(num_people, num_cans):
      total_cans = num_people * num_cans 
      print(f"We collected a total of {total_cans} of beans for our food drive.")
   
   #we convert the string inputs into integers for calculation
   attendance = int(input("How many people came to the food drive?"))
   can_collection = int(input("How many cans of food did they each bring?"))

   #we can pass the arguments in directly when we call the function
   donated_cans(2,3) 
   #and we can pass the arguments in as variables
   donated_cans(attendance, can_collection) 

notice that the names of variables aren't the same as that of the arguments we pass in when we define the function

we can also use file methods inside functions
>> def print_file(filename):
       print(filename.read())

   print_file(filename.txt)

using the keyword return in a function returns the output of that function
we can set a variable to be the value from a function
>> def addition(a, b):
       return a + b 

   num_sum = addition(3, 8)
   print(num_sum)